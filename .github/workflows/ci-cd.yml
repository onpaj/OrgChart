name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/orgchart
  AZURE_WEBAPP_NAME: ${{ secrets.AZURE_WEBAPP_NAME }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Install frontend dependencies
      run: npm ci
      working-directory: ./frontend
      
    - name: Build frontend
      run: npm run build
      working-directory: ./frontend
      
    - name: Run frontend tests
      run: npm test -- --coverage --watchAll=false
      working-directory: ./frontend
      
    - name: Restore backend dependencies
      run: dotnet restore
      working-directory: ./backend/src
      
    - name: Build backend
      run: dotnet build --no-restore
      working-directory: ./backend/src
      
    - name: Run backend tests
      run: dotnet test --no-build --verbosity normal
      working-directory: ./backend/src

  docker-build-push:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    outputs:
      version: ${{ steps.set-output.outputs.version }}
      image-tag: ${{ steps.set-output.outputs.image-tag }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
      
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.10.2
      with:
        versionSpec: '5.x'
        
    - name: Determine Version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0.10.2
      
    - name: Set output variables
      id: set-output
      run: |
        VERSION="${{ steps.gitversion.outputs.semVer }}"
        IMAGE_TAG="${{ env.DOCKER_IMAGE }}:${VERSION}"
        echo "GitVersion output: ${VERSION}"
        echo "Docker image env: ${{ env.DOCKER_IMAGE }}"
        echo "Full image tag: ${IMAGE_TAG}"
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "image-tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.DOCKER_IMAGE }}:${{ steps.gitversion.outputs.semVer }}
          ${{ env.DOCKER_IMAGE }}:latest
        labels: |
          org.opencontainers.image.version=${{ steps.gitversion.outputs.semVer }}
          org.opencontainers.image.revision=${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        

  deploy-azure:
    needs: [build-and-test, docker-build-push]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Find Web App resource group
      id: webapp-info
      run: |
        RG=$(az webapp list --query "[?name=='${{ env.AZURE_WEBAPP_NAME }}'].resourceGroup" -o tsv)
        echo "resource-group=$RG" >> $GITHUB_OUTPUT
        
    - name: Debug deployment info
      run: |
        echo "Resource Group: ${{ steps.webapp-info.outputs.resource-group }}"
        echo "Image Tag from needs: '${{ needs.docker-build-push.outputs.image-tag }}'"
        echo "Version from needs: '${{ needs.docker-build-push.outputs.version }}'"
        
    - name: Update Web App container settings
      run: |
        IMAGE_TAG="${{ needs.docker-build-push.outputs.image-tag }}"
        echo "Received image tag: '$IMAGE_TAG'"
        
        if [ -z "$IMAGE_TAG" ]; then
          echo "Error: Image tag is empty"
          echo "Debug: All job outputs from docker-build-push:"
          echo "Version: '${{ needs.docker-build-push.outputs.version }}'"
          echo "Image-tag: '${{ needs.docker-build-push.outputs.image-tag }}'"
          exit 1
        fi
        
        echo "Updating Azure Web App with image: $IMAGE_TAG"
        az webapp config container set \
          --name "${{ env.AZURE_WEBAPP_NAME }}" \
          --resource-group "${{ steps.webapp-info.outputs.resource-group }}" \
          --docker-custom-image-name "$IMAGE_TAG" \
          --docker-registry-server-url "https://index.docker.io" \
          --docker-registry-server-user "${{ secrets.DOCKERHUB_USERNAME }}" \
          --docker-registry-server-password "${{ secrets.DOCKERHUB_TOKEN }}"
        
    - name: Restart Web App to pull new image
      run: |
        az webapp restart \
          --name ${{ env.AZURE_WEBAPP_NAME }} \
          --resource-group ${{ steps.webapp-info.outputs.resource-group }}
        
    - name: Azure logout
      run: az logout
      if: always()